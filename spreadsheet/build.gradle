import com.android.builder.core.BuilderConstants

apply plugin: 'com.android.library'

group 'fr.nelaupe'
version '1.1.2'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 4
        targetSdkVersion 25
        versionCode 10
        versionName "1.1.2"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile project(':spreadsheet-annotation')
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    def task = project.tasks.create(name: "jar${name.capitalize()}", type: Jar) {
        dependsOn variant.javaCompile
        from variant.javaCompile.destinationDir

        manifest {
            attributes(
                    "Bundle-Name": 'spreadsheet-lib',
                    "Bundle-Version": project.version
            )
        }

        exclude '**/R.class'
        exclude '**/R\$*.class'
        exclude '**/Manifest.class'
        exclude '**/Manifest\$*.class'
        exclude '**/BuildConfig.class'
    }

    if (name.equals(BuilderConstants.RELEASE)) {
        artifacts.add('archives', task);
    }
}

//region Maven

apply plugin: 'maven'
apply plugin: 'signing'

def isSnapshot = version.endsWith('-SNAPSHOT')
def ossrhUsername = hasProperty('sonatypeUsername') ? sonatypeUsername : System.getenv('CI_NEXUS_USERNAME')
def ossrhPassword = hasProperty('sonatypePassword') ? sonatypePassword : System.getenv('CI_NEXUS_PASSWORD')

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {
            name 'spreadsheet-lib'
            packaging 'aar'
            groupId project.group
            artifactId project.name
            version project.version
            description 'Two-dimensional scrollable array'
            inceptionYear '2015'
            url 'http://www.lucas-nelaupe.fr'

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0'
                    distribution 'repo'
                }
            }

            scm {
                url "https://github.com/lucas34/spreadsheet-lib"
                connection "scm:git:git@github.com:lucas34/spreadsheet-lib.git"
                developerConnection "scm:git:git@github.com:lucas34/spreadsheet-lib.git"
            }

            developers {
                developer {
                    id 'lucas34'
                    name 'Lucas Nelaupe'
                    email 'lucas34990@gmail.com'
                    url 'http://www.lucas-nelaupe.fr'
                    roles {
                        role 'author'
                        role 'developer'
                    }
                    timezone '+8'
                }
            }
        }
    }
}

signing {
    required { !isSnapshot && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

//endregion